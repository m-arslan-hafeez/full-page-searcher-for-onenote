<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICU4N.Transliterator</name>
    </assembly>
    <members>
        <member name="T:ICU4N.Impl.UtilityExtensions">
            <summary>
            This class contains utility functions so testing not needed
            </summary>
        </member>
        <member name="M:ICU4N.Impl.UtilityExtensions.AppendToRule(System.Text.StringBuilder,System.String,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Append the given string to the rule.  Calls the single-character
            version of appendToRule for each character.
            </summary>
            <param name="rule"></param>
            <param name="text"></param>
            <param name="isLiteral"></param>
            <param name="escapeUnprintable"></param>
            <param name="quoteBuf"></param>
        </member>
        <member name="M:ICU4N.Impl.UtilityExtensions.AppendToRule(System.Text.StringBuilder,ICU4N.Text.IUnicodeMatcher,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Given a <paramref name="matcher"/> reference, which may be null, append its
            pattern as a literal to the given <paramref name="rule"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Impl.UtilityExtensions.FormatInput(ICU4N.Text.ReplaceableString,ICU4N.Text.TransliterationPosition)">
            <summary>
            For debugging purposes; format the given text in the form
            aaa{bbb|ccc|ddd}eee, where the {} indicate the context start
            and limit, and the || indicate the start and limit.
            </summary>
        </member>
        <member name="M:ICU4N.Impl.UtilityExtensions.FormatInput(System.Text.StringBuilder,ICU4N.Text.ReplaceableString,ICU4N.Text.TransliterationPosition)">
            <summary>
            For debugging purposes; format the given text in the form
            aaa{bbb|ccc|ddd}eee, where the {} indicate the context start
            and limit, and the || indicate the start and limit.
            </summary>
            <param name="appendTo"></param>
            <param name="input"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:ICU4N.Impl.UtilityExtensions.FormatInput(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition)">
            <summary>
            Convenience method.
            </summary>
        </member>
        <member name="M:ICU4N.Impl.UtilityExtensions.FormatInput(System.Text.StringBuilder,ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition)">
            <summary>
            Convenience method.
            </summary>
        </member>
        <member name="T:ICU4N.Text.AnyTransliterator">
            <summary>
            A transliterator that translates multiple input scripts to a single
            output script.  It is named Any-T or Any-T/V, where T is the target
            and V is the optional variant.  The target T is a script.
            </summary>
            <remarks>
            An AnyTransliterator partitions text into runs of the same
            script, together with adjacent <see cref="F:ICU4N.Globalization.UScript.Common"/> 
            or <see cref="F:ICU4N.Globalization.UScript.Inherited"/> characters.
            After determining the script of each run, it transliterates from
            that script to the given target/variant.  It does so by
            instantiating a transliterator from the source script to the
            target/variant.  If a run consists only of the target script,
            <see cref="F:ICU4N.Globalization.UScript.Common"/>, or <see cref="F:ICU4N.Globalization.UScript.Inherited"/> 
            characters, then the run is not changed.
            <para/>
            At startup, all possible AnyTransliterators are registered with
            the system, as determined by examining the registered script
            transliterators.
            </remarks>
            <since>ICU 2.2</since>
            <author>Alan Liu</author>
        </member>
        <member name="F:ICU4N.Text.AnyTransliterator.cache">
            <summary>
            Cache mapping Script code values to Transliterator*.
            </summary>
        </member>
        <member name="F:ICU4N.Text.AnyTransliterator.target">
            <summary>
            The target or target/variant string.
            </summary>
        </member>
        <member name="F:ICU4N.Text.AnyTransliterator.targetScript">
            <summary>
            The target script code.  Never <see cref="F:ICU4N.Globalization.UScript.InvalidCode"/>.
            </summary>
        </member>
        <member name="F:ICU4N.Text.AnyTransliterator.widthFix">
            <summary>
            Special code for handling width characters
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Private constructor
            </summary>
            <param name="id">The ID of the form S-T or S-T/V, where T is theTarget
            and V is theVariant.  Must not be empty.</param>
            <param name="theTarget">The target name.  Must not be empty, and must
             name a script corresponding to theTargetScript.</param>
            <param name="theVariant">The variant name, or the empty string if
            there is no variant.</param>
            <param name="theTargetScript">The script code corresponding to
            theTarget.</param>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.#ctor(System.String,ICU4N.Text.UnicodeFilter,System.String,System.Int32,ICU4N.Text.Transliterator,System.Collections.Concurrent.ConcurrentDictionary{System.Int32,ICU4N.Text.Transliterator})">
            <summary>
            Constructor.
            </summary>
            <param name="id">The ID of the form S-T or S-T/V, where T is theTarget
            and V is theVariant.  Must not be empty.</param>
            <param name="filter">The Unicode filter.</param>
            <param name="target2">The target name.</param>
            <param name="targetScript2">The script code corresponding to theTarget.</param>
            <param name="widthFix2">The <see cref="T:ICU4N.Text.Transliterator"/> width fix.</param>
            <param name="cache2">The <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> object for cache.</param>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.GetTransliterator(System.Int32)">
            <summary>
            Returns a transliterator from the given source to our target or
            target/variant.  Returns NULL if the source is the same as our
            target script, or if the source is <see cref="F:ICU4N.Globalization.UScript.InvalidCode"/>.
            Caches the result and returns the same transliterator the next
            time.  The caller does NOT own the result and must not delete
            it.
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.Register">
            <summary>
            Registers standard transliterators with the system.  Called by
            <see cref="T:ICU4N.Text.Transliterator"/> during initialization.  Scan all current targets
            and register those that are scripts T as Any-T/V.
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.ScriptNameToCode(System.String)">
            <summary>
            Return the script code for a given name, or
            <see cref="F:ICU4N.Globalization.UScript.InvalidCode"/> if not found.
            </summary>
        </member>
        <member name="T:ICU4N.Text.AnyTransliterator.ScriptRunIterator">
            <summary>
            Returns a series of ranges corresponding to scripts. They will be
            of the form:
            <code>
            ccccSScSSccccTTcTcccc   - c = common, S = first script, T = second
            |            |          - first run (start, limit)
                     |           |  - second run (start, limit)
            </code>
            That is, the runs will overlap. The reason for this is so that a
            transliterator can consider common characters both before and after
            the scripts.
            </summary>
        </member>
        <member name="P:ICU4N.Text.AnyTransliterator.ScriptRunIterator.ScriptCode">
            <summary>
            The code of the current run, valid after <see cref="M:ICU4N.Text.AnyTransliterator.ScriptRunIterator.Next"/> returns.  May
            be <see cref="F:ICU4N.Globalization.UScript.InvalidCode"/> if and only if the entire text is
            <see cref="F:ICU4N.Globalization.UScript.Common"/>/<see cref="F:ICU4N.Globalization.UScript.Inherited"/>.
            </summary>
        </member>
        <member name="P:ICU4N.Text.AnyTransliterator.ScriptRunIterator.Start">
            <summary>
            The start of the run, inclusive, valid after <see cref="M:ICU4N.Text.AnyTransliterator.ScriptRunIterator.Next"/> returns.
            </summary>
        </member>
        <member name="P:ICU4N.Text.AnyTransliterator.ScriptRunIterator.Limit">
            <summary>
            The end of the run, exclusive, valid after <see cref="M:ICU4N.Text.AnyTransliterator.ScriptRunIterator.Next"/> returns.
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.ScriptRunIterator.#ctor(ICU4N.Text.IReplaceable,System.Int32,System.Int32)">
            <summary>
            Constructs a run iterator over the given text from start
            (inclusive) to limit (exclusive).
            </summary>
            <param name="text"></param>
            <param name="start"></param>
            <param name="limit"></param>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.ScriptRunIterator.Next">
            <summary>
            Returns TRUE if there are any more runs.  TRUE is always
            returned at least once.  Upon return, the caller should
            examine scriptCode, start, and limit.
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.ScriptRunIterator.AdjustLimit(System.Int32)">
            <summary>
            Adjusts internal indices for a change in the limit index of the
            given delta.  A positive delta means the limit has increased.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.SafeClone">
            <summary>
            Temporary hack for registry problem. Needs to be replaced by better architecture.
            </summary>
        </member>
        <member name="M:ICU4N.Text.AnyTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.BreakTransliterator">
            <summary>
            Inserts the specified characters at word breaks. To restrict it to particular characters, use a filter.
            TODO: this is an internal class, and only temporary. Remove it once we have \b notation in Transliterator.
            </summary>
        </member>
        <member name="P:ICU4N.Text.BreakTransliterator.Insertion">
            CLOVER:OFF
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.GetBreakIterator">
            CLOVER:ON
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.SetBreakIterator(ICU4N.Text.BreakIterator)">
            CLOVER:OFF
        </member>
        <member name="F:ICU4N.Text.BreakTransliterator.LETTER_OR_MARK_MASK">
            CLOVER:ON
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.Register">
            Registers standard variants with the system.  Called by
            Transliterator during initialization.
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.#ctor(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32)">
             Constructs an iterator over the given range of the given string, with the
             index set at the specified position.
            
             @param  text   The String to be iterated over
             @param  begin  Index of the first character
             @param  end    Index of the character following the last character
             @param  pos    Initial iterator position
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.SetText(ICU4N.Text.IReplaceable)">
             Reset this iterator to point to a new string.  This package-visible
             method is used by other java.text classes that want to avoid allocating
             new ReplaceableCharacterIterator objects every time their setText method
             is called.
            
             @param  text   The String to be iterated over
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.First">
            Implements CharacterIterator.first() for String.
            @see CharacterIterator#first
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Last">
            Implements CharacterIterator.last() for String.
            @see CharacterIterator#last
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.SetIndex(System.Int32)">
            Implements CharacterIterator.setIndex() for String.
            @see CharacterIterator#setIndex
        </member>
        <member name="P:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Current">
            Implements CharacterIterator.current() for String.
            @see CharacterIterator#current
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Next">
            Implements CharacterIterator.next() for String.
            @see CharacterIterator#next
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Previous">
            Implements CharacterIterator.previous() for String.
            @see CharacterIterator#previous
        </member>
        <member name="P:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.BeginIndex">
            Implements CharacterIterator.getBeginIndex() for String.
            @see CharacterIterator#getBeginIndex
        </member>
        <member name="P:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.EndIndex">
            Implements CharacterIterator.getEndIndex() for String.
            @see CharacterIterator#getEndIndex
        </member>
        <member name="P:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Index">
            Implements CharacterIterator.getIndex() for String.
            @see CharacterIterator#getIndex
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Equals(System.Object)">
            Compares the equality of two ReplaceableCharacterIterator objects.
            @param obj the ReplaceableCharacterIterator object to be compared with.
            @return true if the given obj is the same as this
            ReplaceableCharacterIterator object; false otherwise.
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.GetHashCode">
            Computes a hashcode for this iterator.
            @return A hash code
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.ReplaceableCharacterIterator.Clone">
            Creates a copy of this iterator.
            @return A copy of this
        </member>
        <member name="M:ICU4N.Text.BreakTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.CaseFoldTransliterator">
            <summary>
            A transliterator that performs locale-sensitive ToLower()
            case mapping.
            </summary>
        </member>
        <member name="F:ICU4N.Text.CaseFoldTransliterator._ID">
            Package accessible ID.
        </member>
        <member name="M:ICU4N.Text.CaseFoldTransliterator.Register">
            System registration hook.
        </member>
        <member name="M:ICU4N.Text.CaseFoldTransliterator.#ctor">
            Constructs a transliterator.
        </member>
        <member name="M:ICU4N.Text.CaseFoldTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            Implements {@link Transliterator#handleTransliterate}.
        </member>
        <member name="M:ICU4N.Text.CaseFoldTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ICU4N.Text.CompoundTransliterator" -->
        <member name="M:ICU4N.Text.CompoundTransliterator.#ctor(System.Collections.Generic.IList{ICU4N.Text.Transliterator})">
            <summary>
            Internal constructor for Transliterator from a vector of
            transliterators.  The caller is responsible for fixing up the
            ID.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.#ctor(System.String,ICU4N.Text.UnicodeFilter,ICU4N.Text.Transliterator[],System.Int32)">
            <summary>
            Internal method for SafeClone...
            </summary>
            <param name="id"></param>
            <param name="filter2"></param>
            <param name="trans2"></param>
            <param name="numAnonymousRBTs2"></param>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.Init(System.Collections.Generic.IList{ICU4N.Text.Transliterator},ICU4N.Text.TransliterationDirection,System.Boolean)">
            <summary>
            Finish constructing a transliterator: only to be called by
            constructors.  Before calling Init(), set trans and filter to NULL.
            </summary>
            <param name="list">A vector of transliterator objects to be adopted.  It
            should NOT be empty.  The list should be in declared order.  That
            is, it should be in the FORWARD order; if direction is REVERSE then
            the list order will be reversed.</param>
            <param name="direction">Either FORWARD or REVERSE.</param>
            <param name="fixReverseID">If TRUE, then reconstruct the ID of reverse
            entries by calling <see cref="P:ICU4N.Text.Transliterator.ID"/> of component entries.  Some constructors
            do not require this because they apply a facade ID anyway.
            </param>
        </member>
        <member name="P:ICU4N.Text.CompoundTransliterator.Count">
            <summary>
            Gets the number of transliterators in this chain.
            </summary>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.GetTransliterator(System.Int32)">
            <summary>
            Returns the transliterator at the given index in this chain.
            </summary>
            <param name="index">Index into chain, from 0 to <c>Count - 1</c>.</param>
            <returns>Transliterator at the given index.</returns>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.SmartAppend(System.Text.StringBuilder,System.Char)">
            <summary>
            Append <paramref name="c"/> to <paramref name="buf"/>, unless <paramref name="buf"/> 
            is empty or buf already ends in <paramref name="c"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.ToRules(System.Boolean)">
            <summary>
            Override Transliterator:
            Create a rule string that can be passed to <see cref="M:ICU4N.Text.Transliterator.CreateFromRules(System.String,System.String,ICU4N.Text.TransliterationDirection)"/>
            to recreate this transliterator.
            </summary>
            <param name="escapeUnprintable">If TRUE then convert unprintable
            character to their hex escape representations, \\uxxxx or
            \\Uxxxxxxxx.  Unprintable characters are those other than
            U+000A, U+0020..U+007E.</param>
            <returns>The rule string.</returns>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.ComputeMaximumContextLength">
            <summary>
            Compute and set the length of the longest context required by this transliterator.
            This is <em>preceding</em> context.
            </summary>
        </member>
        <member name="M:ICU4N.Text.CompoundTransliterator.SafeClone">
            <summary>
            Temporary hack for registry problem. Needs to be replaced by better architecture.
            </summary>
        </member>
        <member name="T:ICU4N.Text.EscapeTransliterator">
            <summary>
            A transliterator that converts Unicode characters to an escape
            form.  Examples of escape forms are "U+4E01" and "&#x10FFFF;".
            </summary>
            <remarks>
            Escape forms have a prefix and suffix, either of which may be
            empty, a radix, typically 16 or 10, a minimum digit count,
            typically 1, 4, or 8, and a boolean that specifies whether
            supplemental characters are handled as 32-bit code points or as two
            16-bit code units.  Most escape forms handle 32-bit code points,
            but some, such as the Java form, intentionally break them into two
            surrogate pairs, for backward compatibility.
            <para/>
            Some escape forms actually have two different patterns, one for
            BMP characters (0..FFFF) and one for supplements (>FFFF).  To
            handle this, a second EscapeTransliterator may be defined that
            specifies the pattern to be produced for supplementals.  An example
            of a form that requires this is the C form, which uses "\\uFFFF"
            for BMP characters and "\\U0010FFFF" for supplementals.
            <para/>
            This class is package private.  It registers several standard
            variants with the system which are then accessed via their IDs.
            </remarks>
            <author>Alan Liu</author>
        </member>
        <member name="F:ICU4N.Text.EscapeTransliterator.prefix">
            <summary>
            The prefix of the escape form; may be empty, but usually isn't.
            May not be null.
            </summary>
        </member>
        <member name="F:ICU4N.Text.EscapeTransliterator.suffix">
            <summary>
            The prefix of the escape form; often empty.  May not be null.
            </summary>
        </member>
        <member name="F:ICU4N.Text.EscapeTransliterator.radix">
            <summary>
            The radix to display the number in.  Typically 16 or 10.  Must
            be in the range 2 to 36.
            </summary>
        </member>
        <member name="F:ICU4N.Text.EscapeTransliterator.minDigits">
            <summary>
            The minimum number of digits.  Typically 1, 4, or 8.  Values
            less than 1 are equivalent to 1.
            </summary>
        </member>
        <member name="F:ICU4N.Text.EscapeTransliterator.grokSupplementals">
            <summary>
            If true, supplementals are handled as 32-bit code points.  If
            false, they are handled as two 16-bit code units.
            </summary>
        </member>
        <member name="F:ICU4N.Text.EscapeTransliterator.supplementalHandler">
            <summary>
            The form to be used for supplementals.  If this is null then
            the same form is used for BMP characters and supplementals.  If
            this is not null and if grokSupplementals is true then the
            prefix, suffix, radix, and minDigits of this object are used
            for supplementals.
            </summary>
        </member>
        <member name="M:ICU4N.Text.EscapeTransliterator.Register">
            <summary>
            Registers standard variants with the system.  Called by
            Transliterator during initialization.
            </summary>
        </member>
        <member name="M:ICU4N.Text.EscapeTransliterator.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,ICU4N.Text.EscapeTransliterator)">
            <summary>
            Constructs an escape transliterator with the given <paramref name="id"/> and
            parameters.  See the class member documentation for details.
            </summary>
        </member>
        <member name="M:ICU4N.Text.EscapeTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.EscapeTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.FunctionReplacer">
            <summary>
            A replacer that calls a transliterator to generate its output text.
            The input text to the transliterator is the output of another
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> object.  That is, this replacer wraps another
            replacer with a transliterator.
            </summary>
            <author>Alan Liu</author>
        </member>
        <member name="F:ICU4N.Text.FunctionReplacer.translit">
            <summary>
            The transliterator.  Must not be null.
            </summary>
        </member>
        <member name="F:ICU4N.Text.FunctionReplacer.replacer">
            <summary>
            The replacer object.  This generates text that is then
            processed by 'translit'.  Must not be null.
            </summary>
        </member>
        <member name="M:ICU4N.Text.FunctionReplacer.#ctor(ICU4N.Text.Transliterator,ICU4N.Text.IUnicodeReplacer)">
            <summary>
            Construct a replacer that takes the output of the given
            <paramref name="replacer"/>, passes it through the given <paramref name="transliterator"/>, and emits
            the result as output.
            </summary>
        </member>
        <member name="M:ICU4N.Text.FunctionReplacer.Replace(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32[])">
            <summary>
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API
            </summary>
        </member>
        <member name="M:ICU4N.Text.FunctionReplacer.ToReplacerPattern(System.Boolean)">
            <summary>
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API
            </summary>
        </member>
        <member name="M:ICU4N.Text.FunctionReplacer.AddReplacementSetTo(ICU4N.Text.UnicodeSet)">
            <summary>
            Union the set of all characters that may output by this object
            into the given set.
            </summary>
            <param name="toUnionTo">The set into which to union the output characters.</param>
        </member>
        <member name="T:ICU4N.Text.LowercaseTransliterator">
            <summary>
            A transliterator that performs locale-sensitive ToLower()
            case mapping.
            </summary>
        </member>
        <member name="F:ICU4N.Text.LowercaseTransliterator._ID">
            <summary>
            Package accessible ID.
            </summary>
        </member>
        <member name="M:ICU4N.Text.LowercaseTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.LowercaseTransliterator.#ctor(ICU4N.Util.ULocale)">
            <summary>
            Constructs a transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.LowercaseTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.LowercaseTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>.
        </member>
        <member name="T:ICU4N.Text.NameUnicodeTransliterator">
            <summary>
            A transliterator that performs name to character mapping.
            </summary>
            <author>Alan Liu</author>
        </member>
        <member name="M:ICU4N.Text.NameUnicodeTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.NameUnicodeTransliterator.#ctor(ICU4N.Text.UnicodeFilter)">
            <summary>
            Constructs a transliterator.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ICU4N.Text.NameUnicodeTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.NameUnicodeTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.NormalizationTransliterator">
            <author>Alan Liu, Markus Scherer</author>
        </member>
        <member name="M:ICU4N.Text.NormalizationTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.NormalizationTransliterator.#ctor(System.String,ICU4N.Text.Normalizer2)">
            Constructs a transliterator.
        </member>
        <member name="M:ICU4N.Text.NormalizationTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.NormalizationTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.NullTransliterator">
            <summary>
            A transliterator that leaves text unchanged.
            </summary>
        </member>
        <member name="F:ICU4N.Text.NullTransliterator.SHORT_ID">
            <summary>
            Package accessible IDs for this transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.NullTransliterator.#ctor">
            <summary>
            Constructs a transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.NullTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
            <param name="text"></param>
            <param name="offsets"></param>
            <param name="incremental"></param>
        </member>
        <member name="M:ICU4N.Text.NullTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.RemoveTransliterator">
            <summary>
            A transliterator that removes characters.  This is useful in conjunction
            with a filter.
            </summary>
        </member>
        <member name="F:ICU4N.Text.RemoveTransliterator._ID">
            <summary>
            ID for this transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.RemoveTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.RemoveTransliterator.#ctor">
            <summary>
            Constructs a transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.RemoveTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <param name="incremental"></param>
        </member>
        <member name="M:ICU4N.Text.RemoveTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="M:ICU4N.Text.RuleBasedTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            Implements {@link Transliterator#handleTransliterate}.
            @internal
            @deprecated This API is ICU internal only.
        </member>
        <member name="P:ICU4N.Text.RuleBasedTransliterator.Data.RuleSet">
            Rule table.  May be empty.
        </member>
        <member name="F:ICU4N.Text.RuleBasedTransliterator.Data.variableNames">
            Map variable name (String) to variable (char[]).  A variable name
            corresponds to zero or more characters, stored in a char[] array in
            this hash.  One or more of these chars may also correspond to a
            UnicodeSet, in which case the character in the char[] in this hash is
            a stand-in: it is an index for a secondary lookup in
            data.variables.  The stand-in also represents the UnicodeSet in
            the stored rules.
        </member>
        <member name="F:ICU4N.Text.RuleBasedTransliterator.Data.variables">
            Map category variable (Character) to UnicodeMatcher or UnicodeReplacer.
            Variables that correspond to a set of characters are mapped
            from variable name to a stand-in character in data.variableNames.
            The stand-in then serves as a key in this hash to lookup the
            actual UnicodeSet object.  In addition, the stand-in is
            stored in the rule text to represent the set of characters.
            variables[i] represents character (variablesBase + i).
        </member>
        <member name="F:ICU4N.Text.RuleBasedTransliterator.Data.variablesBase">
            The character that represents variables[0].  Characters
            variablesBase through variablesBase +
            variables.length - 1 represent UnicodeSet objects.
        </member>
        <member name="M:ICU4N.Text.RuleBasedTransliterator.Data.LookupMatcher(System.Int32)">
            Return the UnicodeMatcher represented by the given character, or
            null if none.
        </member>
        <member name="M:ICU4N.Text.RuleBasedTransliterator.Data.LookupReplacer(System.Int32)">
            Return the UnicodeReplacer represented by the given character, or
            null if none.
        </member>
        <member name="M:ICU4N.Text.RuleBasedTransliterator.ToRules(System.Boolean)">
            Return a representation of this transliterator as source rules.
            These rules will produce an equivalent transliterator if used
            to construct a new transliterator.
            @param escapeUnprintable if TRUE then convert unprintable
            character to their hex escape representations, \\uxxxx or
            \\Uxxxxxxxx.  Unprintable characters are those other than
            U+000A, U+0020..U+007E.
            @return rules string
            @internal
            @deprecated This API is ICU internal only.
        </member>
        <member name="M:ICU4N.Text.RuleBasedTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            @internal
            @deprecated This API is ICU internal only.
        </member>
        <member name="M:ICU4N.Text.RuleBasedTransliterator.SafeClone">
            Temporary hack for registry problem. Needs to be replaced by better architecture.
            @internal
            @deprecated This API is ICU internal only.
        </member>
        <member name="T:ICU4N.Text.SourceTargetUtility">
            <summary>
            Simple internal utility class for helping with getSource/TargetSet
            </summary>
        </member>
        <member name="T:ICU4N.Text.StringMatcher">
            <summary>
            An object that matches a fixed input string, implementing the
            <see cref="T:ICU4N.Text.IUnicodeMatcher"/> API.  This object also implements the
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API, allowing it to emit the matched text as
            output.  Since the match text may contain flexible match elements,
            such as <see cref="T:ICU4N.Text.UnicodeSet"/>s, the emitted text is not the match pattern, but
            instead a substring of the actual matched text.  Following
            convention, the output text is the leftmost match seen up to this
            point.
            </summary>
            <remarks>
            A StringMatcher may represent a segment, in which case it has a
            positive segment number.  This affects how the matcher converts
            itself to a pattern but does not otherwise affect its function.
            <para/>
            A StringMatcher that is not a segment should not be used as a
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/>.
            </remarks>
        </member>
        <member name="F:ICU4N.Text.StringMatcher.pattern">
            <summary>
            The text to be matched.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringMatcher.matchStart">
            <summary>
            Start offset, in the match text, of the <em>rightmost</em>
            match.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringMatcher.matchLimit">
            <summary>
            Limit offset, in the match text, of the <em>rightmost</em>
            match.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringMatcher.segmentNumber">
            <summary>
            The segment number, 1-based, or 0 if not a segment.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringMatcher.data">
            <summary>
            Context object that maps stand-ins to matcher and replacer
            objects.
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.#ctor(System.String,System.Int32,ICU4N.Text.RuleBasedTransliterator.Data)">
            <summary>
            Construct a matcher that matches the given pattern string.
            </summary>
            <param name="theString">The pattern to be matched, possibly containing
            stand-ins that represent nested <see cref="T:ICU4N.Text.IUnicodeMatcher"/> objects.</param>
            <param name="segmentNum">The segment number from 1..n, or 0 if this is
            not a segment.</param>
            <param name="theData">Context object mapping stand-ins to <see cref="T:ICU4N.Text.IUnicodeMatcher"/> objects.</param>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.#ctor(System.String,System.Int32,System.Int32,System.Int32,ICU4N.Text.RuleBasedTransliterator.Data)">
            <summary>
            Construct a matcher that matches a substring of the given
            pattern string.
            </summary>
            <param name="theString">The pattern to be matched, possibly containing
            stand-ins that represent nested <see cref="T:ICU4N.Text.IUnicodeMatcher"/> objects.</param>
            <param name="start">First character of <paramref name="theString"/> to be matched.</param>
            <param name="limit">Index after the last character of <paramref name="theString"/> to be matched.</param>
            <param name="segmentNum">The segment number from 1..n, or 0 if this is not a segment.</param>
            <param name="theData">context object mapping stand-ins to <see cref="T:ICU4N.Text.IUnicodeMatcher"/> objects.</param>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.Matches(ICU4N.Text.IReplaceable,System.Int32[],System.Int32,System.Boolean)">
            <summary>
            Implement <see cref="T:ICU4N.Text.IUnicodeMatcher"/>
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.ToPattern(System.Boolean)">
            <summary>
            Implement <see cref="T:ICU4N.Text.IUnicodeMatcher"/>
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.MatchesIndexValue(System.Int32)">
            <summary>
            Implement <see cref="T:ICU4N.Text.IUnicodeMatcher"/>
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.AddMatchSetTo(ICU4N.Text.UnicodeSet)">
            <summary>
            Implementation of <see cref="T:ICU4N.Text.IUnicodeMatcher"/> API.  Union the set of all
            characters that may be matched by this object into the given
            set.
            </summary>
            <param name="toUnionTo">The set into which to union the source characters.</param>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.Replace(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32[])">
            <summary>
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.ToReplacerPattern(System.Boolean)">
            <summary>
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.ResetMatch">
            <summary>
            Remove any match data.  This must be called before performing a
            set of matches with this segment.
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringMatcher.AddReplacementSetTo(ICU4N.Text.UnicodeSet)">
            <summary>
            Union the set of all characters that may output by this object
            into the given set.
            </summary>
            <param name="toUnionTo">The set into which to union the output characters.</param>
        </member>
        <member name="T:ICU4N.Text.StringReplacer">
            <summary>
            A replacer that produces static text as its output.  The text may
            contain transliterator stand-in characters that represent nested
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> objects, making it possible to encode a tree of
            replacers in a <see cref="T:ICU4N.Text.StringReplacer"/>.  A <see cref="T:ICU4N.Text.StringReplacer"/> that contains such
            stand-ins is called a <em>complex</em> <see cref="T:ICU4N.Text.StringReplacer"/>.  A complex
            <see cref="T:ICU4N.Text.StringReplacer"/> has a slower processing loop than a non-complex one.
            </summary>
            <author>Alan Liu</author>
        </member>
        <member name="F:ICU4N.Text.StringReplacer.output">
            <summary>
            Output text, possibly containing stand-in characters that
            represent nested <see cref="T:ICU4N.Text.IUnicodeReplacer"/>s.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringReplacer.cursorPos">
            <summary>
            Cursor position.  Value is ignored if hasCursor is false.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringReplacer.hasCursor">
            <summary>
            True if this object outputs a cursor position.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringReplacer.isComplex">
            <summary>
            A complex object contains nested replacers and requires more
            complex processing.  StringReplacers are initially assumed to
            be complex.  If no nested replacers are seen during processing,
            then isComplex is set to false, and future replacements are
            short circuited for better performance.
            </summary>
        </member>
        <member name="F:ICU4N.Text.StringReplacer.data">
            <summary>
            Object that translates stand-in characters in 'output' to
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> objects.
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringReplacer.#ctor(System.String,System.Int32,ICU4N.Text.RuleBasedTransliterator.Data)">
            <summary>
            Construct a <see cref="T:ICU4N.Text.StringReplacer"/> that sets the emits the given output
            text and sets the cursor to the given position.
            </summary>
            <param name="theOutput">Text that will replace input text when the
            <see cref="M:ICU4N.Text.StringReplacer.Replace(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32[])"/> method is called.  May contain stand-in characters
            that represent nested replacers.</param>
            <param name="theCursorPos">Cursor position that will be returned by 
            the <see cref="M:ICU4N.Text.StringReplacer.Replace(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32[])"/> method.</param>
            <param name="theData">Transliterator context object that translates
            stand-in characters to <see cref="T:ICU4N.Text.IUnicodeReplacer"/> objects.</param>
        </member>
        <member name="M:ICU4N.Text.StringReplacer.#ctor(System.String,ICU4N.Text.RuleBasedTransliterator.Data)">
            <summary>
            Construct a <see cref="T:ICU4N.Text.StringReplacer"/> that sets the emits the given output
            text and does not modify the cursor.
            </summary>
            <param name="theOutput">Text that will replace input text when the
            <see cref="M:ICU4N.Text.StringReplacer.Replace(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32[])"/> method is called.  
            May contain stand-in characters that represent nested replacers.</param>
            <param name="theData">Transliterator context object that translates
            stand-in characters to <see cref="T:ICU4N.Text.IUnicodeReplacer"/> objects.</param>
        </member>
        <member name="M:ICU4N.Text.StringReplacer.Replace(ICU4N.Text.IReplaceable,System.Int32,System.Int32,System.Int32[])">
            <summary>
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringReplacer.ToReplacerPattern(System.Boolean)">
            <summary>
            <see cref="T:ICU4N.Text.IUnicodeReplacer"/> API
            </summary>
        </member>
        <member name="M:ICU4N.Text.StringReplacer.AddReplacementSetTo(ICU4N.Text.UnicodeSet)">
            <summary>
            Union the set of all characters that may output by this object
            into the given set.
            </summary>
            <param name="toUnionTo">The set into which to union the output characters.</param>
        </member>
        <member name="T:ICU4N.Text.TitlecaseTransliterator">
            <summary>
            A transliterator that converts all letters (as defined by
            <see cref="M:ICU4N.UChar.IsLetter(System.Int32)"/>) to lower case, except for those
            letters preceded by non-letters.  The latter are converted to title
            case using <see cref="M:ICU4N.UChar.ToTitleCase(System.Int32)"/>.
            </summary>
            <author>Alan Liu</author>
        </member>
        <member name="M:ICU4N.Text.TitlecaseTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.TitlecaseTransliterator.#ctor(ICU4N.Util.ULocale)">
            <summary>
            Constructs a transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.TitlecaseTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.TitlecaseTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.anteContext">
            The match that must occur before the key, or null if there is no
            preceding context.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.key">
            The matcher object for the key.  If null, then the key is empty.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.postContext">
            The match that must occur after the key, or null if there is no
            following context.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.output">
            The object that performs the replacement if the key,
            anteContext, and postContext are matched.  Never null.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.pattern">
            The string that must be matched, consisting of the anteContext, key,
            and postContext, concatenated together, in that order.  Some components
            may be empty (zero length).
            @see anteContextLength
            @see keyLength
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.segments">
            An array of matcher objects corresponding to the input pattern
            segments.  If there are no segments this is null.  N.B. This is
            a UnicodeMatcher for generality, but in practice it is always a
            StringMatcher.  In the future we may generalize this, but for
            now we sometimes cast down to StringMatcher.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.anteContextLength">
            The length of the string that must match before the key.  If
            zero, then there is no matching requirement before the key.
            Substring [0,anteContextLength) of pattern is the anteContext.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.keyLength">
            The length of the key.  Substring [anteContextLength,
            anteContextLength + keyLength) is the key.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.flags">
            Miscellaneous attributes.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.ANCHOR_START">
            Flag attributes.
        </member>
        <member name="F:ICU4N.Text.TransliterationRule.data">
            An alias pointer to the data for this rule.  The data provides
            lookup services for matchers and segments.
        </member>
        <!-- Badly formed XML comment ignored for member "M:ICU4N.Text.TransliterationRule.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,ICU4N.Text.IUnicodeMatcher[],System.Boolean,System.Boolean,ICU4N.Text.RuleBasedTransliterator.Data)" -->
        <member name="P:ICU4N.Text.TransliterationRule.AnteContextLength">
            Return the preceding context length.  This method is needed to
            support the <code>Transliterator</code> method
            <code>getMaximumContextLength()</code>.
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.GetIndexValue">
            Internal method.  Returns 8-bit index value for this rule.
            This is the low byte of the first character of the key,
            unless the first character of the key is a set.  If it's a
            set, or otherwise can match multiple keys, the index value is -1.
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.MatchesIndexValue(System.Int32)">
            Internal method.  Returns true if this rule matches the given
            index value.  The index value is an 8-bit integer, 0..255,
            representing the low byte of the first character of the key.
            It matches this rule if it matches the first character of the
            key, or if the first character of the key is a set, and the set
            contains any character with a low byte equal to the index
            value.  If the rule contains only ante context, as in foo)>bar,
            then it will match any key.
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.Masks(ICU4N.Text.TransliterationRule)">
            Return true if this rule masks another rule.  If r1 masks r2 then
            r1 matches any input string that r2 matches.  If r1 masks r2 and r2 masks
            r1 then r1 == r2.  Examples: "a>x" masks "ab>y".  "a>x" masks "a[b]>y".
            "[c]a>x" masks "[dc]a>y".
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.MatchAndReplace(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
             Attempt a match and replacement at the given position.  Return
             the degree of match between this rule and the given text.  The
             degree of match may be mismatch, a partial match, or a full
             match.  A mismatch means at least one character of the text
             does not match the context or key.  A partial match means some
             context and key characters match, but the text is not long
             enough to match all of them.  A full match means all context
             and key characters match.
            
             If a full match is obtained, perform a replacement, update pos,
             and return U_MATCH.  Otherwise both text and pos are unchanged.
            
             @param text the text
             @param pos the position indices
             @param incremental if TRUE, test for partial matches that may
             be completed by additional text inserted at pos.limit.
             @return one of <code>U_MISMATCH</code>,
             <code>U_PARTIAL_MATCH</code>, or <code>U_MATCH</code>.  If
             incremental is FALSE then U_PARTIAL_MATCH will not be returned.
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.ToRule(System.Boolean)">
            <summary>
            Create a source string that represents this rule.  Append it to the
            given string.
            </summary>
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:ICU4N.Text.TransliterationRule.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <summary>
            Find the source and target sets, subject to the input filter.
            There is a known issue with filters containing multiple characters.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ICU4N.Text.TransliterationRuleSet" -->
        <member name="F:ICU4N.Text.TransliterationRuleSet.ruleVector">
            <summary>
            Vector of rules, in the order added.
            </summary>
        </member>
        <member name="F:ICU4N.Text.TransliterationRuleSet.maxContextLength">
            <summary>
            Length of the longest preceding context
            </summary>
        </member>
        <member name="F:ICU4N.Text.TransliterationRuleSet.rules">
            <summary>
            Sorted and indexed table of rules.  This is created by <see cref="M:ICU4N.Text.TransliterationRuleSet.Freeze"/> from
            the rules in ruleVector.  rules.Length >= ruleVector.Count, and the
            references in rules[] are aliases of the references in ruleVector.
            A single rule in ruleVector is listed one or more times in rules[].
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ICU4N.Text.TransliterationRuleSet.index" -->
        <member name="M:ICU4N.Text.TransliterationRuleSet.#ctor">
            <summary>
            Construct a new empty rule set.
            </summary>
        </member>
        <member name="P:ICU4N.Text.TransliterationRuleSet.MaximumContextLength">
            <summary>
            Return the maximum context length.
            </summary>
            <returns>the length of the longest preceding context.</returns>
        </member>
        <member name="M:ICU4N.Text.TransliterationRuleSet.AddRule(ICU4N.Text.TransliterationRule)">
            <summary>
            Add a rule to this set.  Rules are added in order, and order is
            significant.
            </summary>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:ICU4N.Text.TransliterationRuleSet.Freeze">
            <summary>
            Close this rule set to further additions, check it for masked rules,
            and index it to optimize performance.
            </summary>
            <exception cref="T:System.ArgumentException">If some rules are masked.</exception>
        </member>
        <member name="M:ICU4N.Text.TransliterationRuleSet.Transliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Transliterate the given text with the given UTransPosition
            indices.  Return TRUE if the transliteration should continue
            or FALSE if it should halt (because of a U_PARTIAL_MATCH match).
            Note that FALSE is only ever returned if isIncremental is TRUE.
            </summary>
            <param name="text">The text to be transliterated.</param>
            <param name="pos">The position indices, which will be updated.</param>
            <param name="incremental">If TRUE, assume new text may be inserted
            at index.Limit, and return FALSE if thre is a partial match.</param>
            <returns>TRUE unless a U_PARTIAL_MATCH has been obtained,
            indicating that transliteration should stop until more text
            arrives.</returns>
        </member>
        <member name="M:ICU4N.Text.TransliterationRuleSet.ToRules(System.Boolean)">
            <summary>
            Create rule strings that represents this rule set.
            </summary>
        </member>
        <member name="T:ICU4N.Text.TransliterationDirection">
            <summary>
            Direction options for <see cref="T:ICU4N.Text.Transliterator"/>.
            </summary>
            <draft>ICU4N 60.1</draft>
        </member>
        <member name="F:ICU4N.Text.TransliterationDirection.Forward">
            <summary>
            Direction constant indicating the forward direction in a transliterator,
            e.g., the forward rules of a RuleBasedTransliterator.  An "A-B"
            transliterator transliterates A to B when operating in the forward
            direction, and B to A when operating in the reverse direction.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="F:ICU4N.Text.TransliterationDirection.Reverse">
            <summary>
            Direction constant indicating the reverse direction in a transliterator,
            e.g., the reverse rules of a RuleBasedTransliterator.  An "A-B"
            transliterator transliterates A to B when operating in the forward
            direction, and B to A when operating in the reverse direction.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="T:ICU4N.Text.ITransliteratorFactory">
            <summary>
            The factory interface for transliterators.  Transliterator
            subclasses can register factory objects for IDs using the
            <see cref="M:ICU4N.Text.Transliterator.RegisterFactory(System.String,ICU4N.Text.ITransliteratorFactory)"/>
            method of Transliterator.  When invoked, the
            factory object will be passed the ID being instantiated.  This
            makes it possible to register one factory method to more than
            one ID, or for a factory method to parameterize its result
            based on the variant.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.ITransliteratorFactory.GetInstance(System.String)">
            <summary>
            Return a transliterator for the given id.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ICU4N.Text.TransliterationPosition" -->
        <member name="P:ICU4N.Text.TransliterationPosition.ContextStart">
            Beginning index, inclusive, of the context to be considered for
            a transliteration operation.  The transliterator will ignore
            anything before this index.  INPUT/OUTPUT parameter: This parameter
            is updated by a transliteration operation to reflect the maximum
            amount of antecontext needed by a transliterator.
            @stable ICU 2.0
        </member>
        <member name="P:ICU4N.Text.TransliterationPosition.ContextLimit">
            Ending index, exclusive, of the context to be considered for a
            transliteration operation.  The transliterator will ignore
            anything at or after this index.  INPUT/OUTPUT parameter: This
            parameter is updated to reflect changes in the length of the
            text, but points to the same logical position in the text.
            @stable ICU 2.0
        </member>
        <member name="P:ICU4N.Text.TransliterationPosition.Start">
            Beginning index, inclusive, of the text to be transliteratd.
            INPUT/OUTPUT parameter: This parameter is advanced past
            characters that have already been transliterated by a
            transliteration operation.
            @stable ICU 2.0
        </member>
        <member name="P:ICU4N.Text.TransliterationPosition.Limit">
            Ending index, exclusive, of the text to be transliteratd.
            INPUT/OUTPUT parameter: This parameter is updated to reflect
            changes in the length of the text, but points to the same
            logical position in the text.
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.#ctor">
            Constructs a Position object with start, limit,
            contextStart, and contextLimit all equal to zero.
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            Constructs a Position object with the given start,
            contextStart, and contextLimit.  The limit is set to the
            contextLimit.
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructs a Position object with the given start, limit,
            contextStart, and contextLimit.
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.#ctor(ICU4N.Text.TransliterationPosition)">
            Constructs a Position object that is a copy of another.
            @stable ICU 2.6
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.Set(ICU4N.Text.TransliterationPosition)">
            Copies the indices of this position from another.
            @stable ICU 2.6
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.Equals(System.Object)">
            Returns true if this Position is equal to the given object.
            @stable ICU 2.6
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.GetHashCode">
            Mock implementation of hashCode(). This implementation always returns a constant
            value. When Java assertion is enabled, this method triggers an assertion failure.
            @internal
            @deprecated This API is ICU internal only.
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.ToString">
            Returns a string representation of this Position.
            @stable ICU 2.6
        </member>
        <member name="M:ICU4N.Text.TransliterationPosition.Validate(System.Int32)">
            Check all bounds.  If they are invalid, throw an exception.
            @param length the length of the string this object applies to
            @exception IllegalArgumentException if any indices are out
            of bounds
            @stable ICU 2.0
        </member>
        <member name="F:ICU4N.Text.Transliterator.Forward">
            <summary>
            Direction constant indicating the forward direction in a transliterator,
            e.g., the forward rules of a RuleBasedTransliterator.  An "A-B"
            transliterator transliterates A to B when operating in the forward
            direction, and B to A when operating in the reverse direction.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="F:ICU4N.Text.Transliterator.Reverse">
            <summary>
            Direction constant indicating the forward direction in a transliterator,
            e.g., the forward rules of a RuleBasedTransliterator.  An "A-B"
            transliterator transliterates A to B when operating in the forward
            direction, and B to A when operating in the reverse direction.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="F:ICU4N.Text.Transliterator.id">
            Programmatic name, e.g., "Latin-Arabic".
        </member>
        <member name="F:ICU4N.Text.Transliterator.filter">
            This transliterator's filter.  Any character for which
            <tt>filter.contains()</tt> returns <tt>false</tt> will not be
            altered by this transliterator.  If <tt>filter</tt> is
            <tt>null</tt> then no filtering is applied.
        </member>
        <member name="F:ICU4N.Text.Transliterator.registry">
            System transliterator registry.
        </member>
        <member name="F:ICU4N.Text.Transliterator.RB_DISPLAY_NAME_PREFIX">
            Prefix for resource bundle key for the display name for a
            transliterator.  The ID is appended to this to form the key.
            The resource bundle value should be a String.
        </member>
        <member name="F:ICU4N.Text.Transliterator.RB_SCRIPT_DISPLAY_NAME_PREFIX">
            Prefix for resource bundle key for the display name for a
            transliterator SCRIPT.  The ID is appended to this to form the key.
            The resource bundle value should be a String.
        </member>
        <member name="F:ICU4N.Text.Transliterator.RB_DISPLAY_NAME_PATTERN">
            Resource bundle key for display name pattern.
            The resource bundle value should be a String forming a
            MessageFormat pattern, e.g.:
            "{0,choice,0#|1#{1} Transliterator|2#{1} to {2} Transliterator}".
        </member>
        <member name="F:ICU4N.Text.Transliterator.ID_DELIM">
            Delimiter between elements in a compound ID.
        </member>
        <member name="F:ICU4N.Text.Transliterator.ID_SEP">
            Delimiter before target in an ID.
        </member>
        <member name="F:ICU4N.Text.Transliterator.VARIANT_SEP">
            Delimiter before variant in an ID.
        </member>
        <!-- Badly formed XML comment ignored for member "F:ICU4N.Text.Transliterator.DEBUG" -->
        <member name="M:ICU4N.Text.Transliterator.#ctor(System.String,ICU4N.Text.UnicodeFilter)">
            Default constructor.
            @param ID the string identifier for this transliterator
            @param filter the filter.  Any character for which
            <tt>filter.contains()</tt> returns <tt>false</tt> will not be
            altered by this transliterator.  If <tt>filter</tt> is
            <tt>null</tt> then no filtering is applied.
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.Transliterator.Transliterate(ICU4N.Text.IReplaceable,System.Int32,System.Int32)">
             Transliterates a segment of a string, with optional filtering.
            
             @param text the string to be transliterated
             @param start the beginning index, inclusive; <code>0 &lt;= start
             &lt;= limit</code>.
             @param limit the ending index, exclusive; <code>start &lt;= limit
             &lt;= text.length()</code>.
             @return The new limit index.  The text previously occupying <code>[start,
             limit)</code> has been transliterated, possibly to a string of a different
             length, at <code>[start, </code><em>new-limit</em><code>)</code>, where
             <em>new-limit</em> is the return value. If the input offsets are out of bounds,
             the returned value is -1 and the input string remains unchanged.
             @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.Transliterator.Transliterate(ICU4N.Text.IReplaceable)">
            Transliterates an entire string in place. Convenience method.
            @param text the string to be transliterated
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.Transliterator.Transliterate(System.String)">
             Transliterate an entire string and returns the result. Convenience method.
            
             @param text the string to be transliterated
             @return The transliterated text
             @stable ICU 2.0
        </member>
        <!-- Badly formed XML comment ignored for member "M:ICU4N.Text.Transliterator.Transliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.String)" -->
        <member name="M:ICU4N.Text.Transliterator.Transliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Int32)">
            Transliterates the portion of the text buffer that can be
            transliterated unambiguosly after a new character has been
            inserted, typically as a result of a keyboard event.  This is a
            convenience method; see {@link #transliterate(Replaceable,
            Transliterator.Position, String)} for details.
            @param text the buffer holding transliterated and
            untransliterated text
            @param index the start and limit of the text, the position
            of the cursor, and the start and limit of transliteration.
            @param insertion text to be inserted and possibly
            transliterated into the translation buffer at
            <code>index.contextLimit</code>.
            @see #transliterate(Replaceable, Transliterator.Position, String)
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.Transliterator.Transliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition)">
            Transliterates the portion of the text buffer that can be
            transliterated unambiguosly.  This is a convenience method; see
            {@link #transliterate(Replaceable, Transliterator.Position,
            String)} for details.
            @param text the buffer holding transliterated and
            untransliterated text
            @param index the start and limit of the text, the position
            of the cursor, and the start and limit of transliteration.
            @see #transliterate(Replaceable, Transliterator.Position, String)
            @stable ICU 2.0
        </member>
        <member name="M:ICU4N.Text.Transliterator.FinishTransliteration(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition)">
            Finishes any pending transliterations that were waiting for
            more characters.  Clients should call this method as the last
            call after a sequence of one or more calls to
            <code>transliterate()</code>.
            @param text the buffer holding transliterated and
            untransliterated text.
            @param index the array of indices previously passed to {@link
            #transliterate}
            @stable ICU 2.0
        </member>
        <!-- Badly formed XML comment ignored for member "M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)" -->
        <member name="M:ICU4N.Text.Transliterator.FilteredTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean,System.Boolean)">
            <summary>
            Top-level transliteration method, handling filtering, incremental and
            non-incremental transliteration, and rollback.  All transliteration
            public API methods eventually call this method with a rollback argument
            of <c>true</c>.  Other entities may call this method but rollback should be
            <c>false</c>.
            </summary>
            <remarks>
            If this transliterator has a filter, break up the input text into runs
            of unfiltered characters.  Pass each run to
            <c>[subclass].HandleTransliterate().</c>.
            <para/>
            In <paramref name="incremental"/> mode, if rollback is <c>true</c>, perform a special
            incremental procedure in which several passes are made over the input
            text, adding one character at a time, and committing successful
            transliterations as they occur.  Unsuccessful transliterations are rolled
            back and retried with additional characters to give correct results.
            </remarks>
            <param name="text">The text to be transliterated.</param>
            <param name="index">The position indices.</param>
            <param name="incremental">If <c>true</c>, then assume more characters may be inserted
            at <c>index.Limit</c>, and postpone processing to accomodate future incoming
            characters.</param>
            <param name="rollback">If <c>true</c> and if <paramref name="incremental"/> is <c>true</c>, then perform special
            incremental processing, as described above, and undo partial
            transliterations where necessary.  If <paramref name="incremental"/> is <c>false</c> then this
            parameter is ignored.</param>
        </member>
        <member name="M:ICU4N.Text.Transliterator.FilteredTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Transliterate a substring of text, as specified by index, taking filters
            into account.  This method is for subclasses that need to delegate to
            another transliterator, such as <see cref="T:ICU4N.Text.CompoundTransliterator"/>.
            </summary>
            <param name="text">The text to be transliterated.</param>
            <param name="index">The position indices.</param>
            <param name="incremental">If <c>true</c>, then assume more characters may be inserted
            at index.Limit, and postpone processing to accomodate future incoming
            characters.</param>
            <stable>ICU 2.0</stable>
        </member>
        <member name="P:ICU4N.Text.Transliterator.MaximumContextLength">
            <summary>
            Gets or sets the length of the longest context required by this transliterator.
            This is <em>preceding</em> context.  The default value is zero, but
            subclasses can set this property.
            For example, if a transliterator translates "ddd" (where
            d is any digit) to "555" when preceded by "(ddd)", then the preceding
            context length is 5, the length of "(ddd)".
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="P:ICU4N.Text.Transliterator.ID">
            <summary>
            Gets or sets a programmatic identifier for this transliterator.
            If this identifier is passed to <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/>, it
            will return this object, if it has been registered.
            The setter is only for use by subclasses.
            </summary>
            <see cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>
            <see cref="M:ICU4N.Text.Transliterator.GetAvailableIDs"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetDisplayName(System.String)">
            <summary>
            Returns a name for this transliterator that is appropriate for
            display to the user in the default <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>.
            See <see cref="M:ICU4N.Text.Transliterator.GetDisplayName(System.String,System.Globalization.CultureInfo)"/> for details.
            </summary>
            <seealso cref="F:ICU4N.Util.ULocale.Category.DISPLAY"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetDisplayName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a name for this transliterator that is appropriate for
            display to the user in the given locale.  This name is taken
            from the locale resource data in the standard manner of the
            <c>java.text</c> package.
            <para/>
            If no localized names exist in the system resource bundles,
            a name is synthesized using a localized
            <see cref="T:ICU4N.Text.MessageFormat"/> pattern from the resource data.  The
            arguments to this pattern are an integer followed by one or two
            strings.  The integer is the number of strings, either 1 or 2.
            The strings are formed by splitting the ID for this
            transliterator at the first '-'.  If there is no '-', then the
            entire ID forms the only string.
            </summary>
            <param name="id"></param>
            <param name="inLocale">The <see cref="T:ICU4N.Util.ULocale"/> in which the display name should be
            localized.</param>
            <seealso cref="T:ICU4N.Text.MessageFormat"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetDisplayName(System.String,ICU4N.Util.ULocale)">
            <summary>
            Returns a name for this transliterator that is appropriate for
            display to the user in the given locale.  This name is taken
            from the locale resource data in the standard manner of the
            <c>java.text</c> package.
            <para/>
            If no localized names exist in the system resource bundles,
            a name is synthesized using a localized
            <see cref="T:ICU4N.Text.MessageFormat"/> pattern from the resource data.  The
            arguments to this pattern are an integer followed by one or two
            strings.  The integer is the number of strings, either 1 or 2.
            The strings are formed by splitting the ID for this
            transliterator at the first '-'.  If there is no '-', then the
            entire ID forms the only string.
            </summary>
            <param name="id"></param>
            <param name="inLocale">The <see cref="T:ICU4N.Util.ULocale"/> in which the display name should be
            localized.</param>
            <seealso cref="T:ICU4N.Text.MessageFormat"/>
            <stable>ICU 3.2</stable>
        </member>
        <member name="P:ICU4N.Text.Transliterator.Filter">
            <summary>
            Gets or sets the filter used by this transliterator.  If the filter
            is set to <c>null</c> then no filtering will occur.
            <para/>
            Callers must take care if a transliterator is in use by
            multiple threads.  The filter should not be changed by one
            thread while another thread may be transliterating.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetInstance(System.String)">
            <summary>
            Returns a <see cref="T:ICU4N.Text.Transliterator"/> object given its <paramref name="id"/>.
            The <paramref name="id"/> must be either a system transliterator ID or a ID registered
            using <see cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>.
            </summary>
            <param name="id">A valid <paramref name="id"/>, as enumerated by <see cref="M:ICU4N.Text.Transliterator.GetAvailableIDs"/>.</param>
            <returns>A <see cref="T:ICU4N.Text.Transliterator"/> object with the given <paramref name="id"/>.</returns>
            <exception cref="T:System.ArgumentException">If the given <paramref name="id"/> is invalid.</exception>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetInstance(System.String,ICU4N.Text.TransliterationDirection)">
            <summary>
            Returns a <see cref="T:ICU4N.Text.Transliterator"/> object given its <paramref name="id"/>.
            The <paramref name="id"/> must be either a system transliterator ID or a ID registered
            using <see cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>.
            </summary>
            <param name="id">A valid ID, as enumerated by <see cref="M:ICU4N.Text.Transliterator.GetAvailableIDs"/>.</param>
            <param name="dir">Either <see cref="F:ICU4N.Text.TransliterationDirection.Forward"/> or 
            <see cref="F:ICU4N.Text.TransliterationDirection.Reverse"/>. If <see cref="F:ICU4N.Text.TransliterationDirection.Reverse"/> then the
            inverse of the given <paramref name="id"/> is instantiated.</param>
            <returns>A <see cref="T:ICU4N.Text.Transliterator"/> object with the given <paramref name="id"/>.</returns>
            <seealso cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>
            <seealso cref="M:ICU4N.Text.Transliterator.GetAvailableIDs"/>
            <seealso cref="P:ICU4N.Text.Transliterator.ID"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetBasicInstance(System.String,System.String)">
            <summary>
            Create a transliterator from a basic ID.  This is an ID
            containing only the forward direction source, target, and
            variant.
            </summary>
            <param name="id">A basic ID of the form S-T or S-T/V.</param>
            <param name="canonID">Canonical ID to apply to the result, or
            null to leave the ID unchanged.</param>
            <returns>A newly created Transliterator or null if the ID is
            invalid.</returns>
        </member>
        <member name="M:ICU4N.Text.Transliterator.CreateFromRules(System.String,System.String,ICU4N.Text.TransliterationDirection)">
            <summary>
            Returns a <see cref="T:ICU4N.Text.Transliterator"/> object constructed from
            the given rule string.  This will be a <see cref="T:ICU4N.Text.RuleBasedTransliterator"/>,
            if the rule string contains only rules, or a
            <see cref="T:ICU4N.Text.CompoundTransliterator"/>, if it contains ID blocks, or a
            <see cref="T:ICU4N.Text.NullTransliterator"/>, if it contains ID blocks which parse as
            empty for the given direction.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.ToRules(System.Boolean)">
            <summary>
            Returns a rule string for this transliterator.
            </summary>
            <param name="escapeUnprintable">If true, then unprintable characters
            will be converted to escape form backslash-'u' or
            backslash-'U'.</param>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.BaseToRules(System.Boolean)">
            <summary>
            Returns a rule string for this transliterator.  This is
            a non-overrideable base class implementation that subclasses
            may call.  It simply munges the ID into the correct format,
            that is, "foo" =&gt; "::foo".
            </summary>
            <param name="escapeUnprintable">If true, then unprintable characters
            will be converted to escape form backslash-'u' or
            backslash-'U'.</param>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetElements">
            <summary>
            Return the elements that make up this transliterator.  For
            example, if the transliterator "NFD;Jamo-Latin;Latin-Greek"
            were created, the return value of this method would be an array
            of the three transliterator objects that make up that
            transliterator: [NFD, Jamo-Latin, Latin-Greek].
            <para/>
            If this transliterator is not composed of other
            transliterators, then this method will return an array of
            length one containing a reference to this transliterator.
            </summary>
            <returns>An array of one or more transliterators that make up
            this transliterator.</returns>
            <stable>ICU 3.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetSourceSet">
            <summary>
            Returns the set of all characters that may be modified in the
            input text by this <see cref="T:ICU4N.Text.Transliterator"/>.  This incorporates this
            object's current filter; if the filter is changed, the return
            value of this function will change.  The default implementation
            returns an empty set.  Some subclasses may override <see cref="M:ICU4N.Text.Transliterator.HandleGetSourceSet"/>
            to return a more precise result.  The
            return result is approximate in any case and is intended for
            use by tests, tools, or utilities.
            </summary>
            <seealso cref="M:ICU4N.Text.Transliterator.GetTargetSet"/>
            <seealso cref="M:ICU4N.Text.Transliterator.HandleGetSourceSet"/>
            <stable>ICU 2.2</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.HandleGetSourceSet">
            <summary>
            Framework method that returns the set of all characters that
            may be modified in the input text by this <see cref="T:ICU4N.Text.Transliterator"/>,
            ignoring the effect of this object's filter.  The base class
            implementation returns the empty set.  Subclasses that wish to
            implement this should override this method.
            </summary>
            <returns>The set of characters that this transliterator may
            modify.  The set may be modified, so subclasses should return a
            newly-created object.</returns>
            <see cref="M:ICU4N.Text.Transliterator.GetSourceSet"/>
            <see cref="M:ICU4N.Text.Transliterator.GetTargetSet"/>
            <stable>ICU 2.2</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetTargetSet">
            <summary>
            Returns the set of all characters that may be generated as
            replacement text by this transliterator.  The default
            implementation returns the empty set.  Some subclasses may
            override this method to return a more precise result.  The
            return result is approximate in any case and is intended for
            use by tests, tools, or utilities requiring such
            meta-information.
            </summary>
            <remarks>
            Warning. You might expect an empty filter to always produce an empty target.
            However, consider the following:
            <code>
            [Pp]{}[\u03A3\u03C2\u03C3\u03F7\u03F8\u03FA\u03FB] &gt; \';
            </code>
            With a filter of [], you still get some elements in the target set, because this rule will still match. It could
            be recast to the following if it were important.
            <code>
            [Pp]{([\u03A3\u03C2\u03C3\u03F7\u03F8\u03FA\u03FB])} &gt; \' | $1;
            </code>
            </remarks>
            <see cref="M:ICU4N.Text.Transliterator.GetSourceSet"/>
            <stable>ICU 2.2</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <summary>
            Returns the set of all characters that may be generated as
            replacement text by this transliterator, filtered by BOTH the input filter, and the current <see cref="P:ICU4N.Text.Transliterator.Filter"/>.
            <para/>
            SHOULD BE OVERRIDEN BY SUBCLASSES.
            </summary>
            <remarks>
            It is probably an error for any transliterator to NOT override this, but we can't force them to
            for backwards compatibility.
            <para/>
            Other methods vector through this.
            <para/>
            When gathering the information on source and target, the compound transliterator makes things complicated.
            For example, suppose we have:
            <code>
            Global FILTER = [ax]
            a &gt; b;
            :: NULL;
            b &gt; c;
            x &gt; d;
            </code>
            While the filter just allows a and x, b is an intermediate result, which could produce c. So the source and target sets
            cannot be gathered independently. What we have to do is filter the sources for the first transliterator according to
            the global filter, intersect that transliterator's filter. Based on that we get the target.
            The next transliterator gets as a global filter (global + last target). And so on.
            <para/>
            There is another complication:
            <code>
            Global FILTER = [ax]
            a &gt;|b;
            b &gt;c;
            </code>
            Even though b would be filtered from the input, whenever we have a backup, it could be part of the input. So ideally we will
            change the global filter as we go.
            </remarks>
            <param name="inputFilter"></param>
            <param name="sourceSet"></param>
            <param name="targetSet">TODO</param>
            <seealso cref="M:ICU4N.Text.Transliterator.GetTargetSet"/>
            <internal/>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetFilterAsUnicodeSet(ICU4N.Text.UnicodeSet)">
            <summary>
            Returns the intersection of this instance's filter intersected with an external filter.
            The <paramref name="externalFilter"/> must be frozen (it is frozen if not).
            The result may be frozen, so don't attempt to modify.
            </summary>
            <internal/>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetInverse">
            <summary>
            Returns this transliterator's inverse.  See the <see cref="T:ICU4N.Text.Transliterator"/>
            documentation for details.  This implementation simply inverts
            the two entities in the <see cref="P:ICU4N.Text.Transliterator.ID"/> and attempts to retrieve the
            resulting transliterator.  That is, if <see cref="P:ICU4N.Text.Transliterator.ID"/>
            returns "A-B", then this method will return the result of
            <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/> with <c>"B-A"</c> as the parameter,
            or <c>null</c> if that call fails.
            <para/>
            Subclasses with knowledge of their inverse may wish to
            override this method.
            </summary>
            <returns>A transliterator that is an inverse, not necessarily
            exact, of this transliterator, or <c>null</c> if no such
            transliterator is registered.</returns>
            <seealso cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)">
            <summary>
            Registers a subclass of <code>Transliterator</code> with the
            system.  This subclass must have a public constructor taking no
            arguments.  When that constructor is called, the resulting
            object must return the <paramref name="id"/> passed to this method if
            its <see cref="P:ICU4N.Text.Transliterator.ID"/> property is called.
            </summary>
            <param name="id">The result of <see cref="P:ICU4N.Text.Transliterator.ID"/> for this transliterator.</param>
            <param name="transClass">A subclass of <see cref="T:ICU4N.Text.Transliterator"/>.</param>
            <param name="displayName"></param>
            <seealso cref="M:ICU4N.Text.Transliterator.Unregister(System.String)"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterFactory(System.String,ICU4N.Text.ITransliteratorFactory)">
            <summary>
            Register a factory object with the given ID.  The factory
            method should return a new instance of the given transliterator.
            <para/>
            Because ICU may choose to cache <see cref="T:ICU4N.Text.Transliterator"/> objects internally, this must
            be called at application startup, prior to any calls to
            <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/> to avoid undefined behavior.
            </summary>
            <param name="ID">The ID of this transliterator.</param>
            <param name="factory">The factory object.</param>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterInstance(ICU4N.Text.Transliterator)">
            <summary>
            Register a <see cref="T:ICU4N.Text.Transliterator"/> object with the given ID.
            <para/>
            Because ICU may choose to cache Transliterator objects internally, this must
            be called at application startup, prior to any calls to
            <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/> to avoid undefined behavior.
            </summary>
            <param name="trans">Trans the <see cref="T:ICU4N.Text.Transliterator"/> object.</param>
            <stable>ICU 2.2</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterInstance(ICU4N.Text.Transliterator,System.Boolean)">
            <summary>
            Register a <see cref="T:ICU4N.Text.Transliterator"/> object.
            <para/>
            Because ICU may choose to cache <see cref="T:ICU4N.Text.Transliterator"/> objects internally, this must
            be called at application startup, prior to any calls to
            <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/> to avoid undefined behavior.
            </summary>
            <param name="trans">Trans the <see cref="T:ICU4N.Text.Transliterator"/> object.</param>
            <param name="visible"></param>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterAlias(System.String,System.String)">
            <summary>
            Register an ID as an alias of another ID.  Instantiating
            alias ID produces the same result as instantiating the original ID.
            This is generally used to create short aliases of compound IDs.
            <para/>
            Because ICU may choose to cache <see cref="T:ICU4N.Text.Transliterator"/> objects internally, this must
            be called at application startup, prior to any calls to
            <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/> to avoid undefined behavior.
            </summary>
            <param name="aliasID">The new ID being registered.</param>
            <param name="realID">The existing ID that the new ID should be an alias of.</param>
            <stable>ICU 3.6</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterSpecialInverse(System.String,System.String,System.Boolean)">
            <summary>
            Register two targets as being inverses of one another.  For
            example, calling registerSpecialInverse("NFC", "NFD", true) causes
            <see cref="T:ICU4N.Text.Transliterator"/> to form the following inverse relationships:
            <code>
            NFC =&gt; NFD
            Any-NFC =&gt; Any-NFD
            NFD =&gt; NFC
            Any-NFD =&gt; Any-NFC
            </code>
            <para/>
            (Without the special inverse registration, the inverse of NFC
            would be NFC-Any.)  Note that NFD is shorthand for Any-NFD, but
            that the presence or absence of "Any-" is preserved.
            <para/>
            The relationship is symmetrical; registering (a, b) is
            equivalent to registering (b, a).
            <para/>
            The relevant IDs must still be registered separately as
            factories or classes.
            <para/>
            Only the targets are specified.  Special inverses always
            have the form Any-Target1 &lt;=&gt; Any-Target2.  The target should
            have canonical casing (the casing desired to be produced when
            an inverse is formed) and should contain no whitespace or other
            extraneous characters.
            </summary>
            <param name="target">The target against which to register the inverse.</param>
            <param name="inverseTarget">The inverse of target, that is
            Any-target.GetInverse() =&gt; Any-inverseTarget</param>
            <param name="bidirectional">If true, register the reverse relation
            as well, that is, Any-inverseTarget.GetInverse() =&gt; Any-target</param>
        </member>
        <member name="M:ICU4N.Text.Transliterator.Unregister(System.String)">
            <summary>
            Unregisters a transliterator or class.  This may be either
            a system transliterator or a user transliterator or class.
            </summary>
            <param name="ID">the ID of the transliterator or class</param>
            <seealso cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetAvailableIDs">
            <summary>
            Returns an enumeration over the programmatic names of registered
            <see cref="T:ICU4N.Text.Transliterator"/> objects.  This includes both system
            transliterators and user transliterators registered using
            <see cref="M:ICU4N.Text.Transliterator.RegisterType(System.String,System.Type,System.String)"/>. The enumerated names may be
            passed to <see cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <seealso cref="M:ICU4N.Text.Transliterator.GetInstance(System.String)"/>
            <seealso cref="M:ICU4N.Text.Transliterator.GetInstance(System.String,ICU4N.Text.TransliterationDirection)"/>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetAvailableSources">
            <summary>
            Returns an enumeration over the source names of registered
            transliterators.  Source names may be passed to
            <see cref="M:ICU4N.Text.Transliterator.GetAvailableTargets(System.String)"/> to obtain available targets for each
            source.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetAvailableTargets(System.String)">
            <summary>
            Returns an enumeration over the target names of registered
            transliterators having a given source name.  Target names may
            be passed to <see cref="M:ICU4N.Text.Transliterator.GetAvailableTargets(System.String)"/> to obtain available
            variants for each source and target pair.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.GetAvailableVariants(System.String,System.String)">
            <summary>
            Returns an enumeration over the variant names of registered
            transliterators having a given source name and target name.
            </summary>
            <stable>ICU 2.0</stable>
        </member>
        <member name="M:ICU4N.Text.Transliterator.RegisterAny">
            <summary>
            Register the script-based "Any" transliterators: Any-Latin, Any-Greek
            </summary>
        </member>
        <member name="M:ICU4N.Text.Transliterator.Transform(System.String)">
            <summary>
            Implements StringTransform via this method.
            </summary>
            <param name="source">text to be transformed (eg lowercased)</param>
            <stable>ICU 3.8</stable>
        </member>
        <member name="T:ICU4N.Text.TransliteratorIDParser.Specs">
             A structure containing the parsed data of a filtered ID, that
             is, a basic ID optionally with a filter.
            
             'source' and 'target' will always be non-null.  The 'variant'
             will be non-null only if a non-empty variant was parsed.
            
             'sawSource' is true if there was an explicit source in the
             parsed id.  If there was no explicit source, then an implied
             source of ANY is returned and 'sawSource' is set to false.
             
             'filter' is the parsed filter pattern, or null if there was no
             filter.
        </member>
        <member name="T:ICU4N.Text.TransliteratorIDParser.SingleID">
             A structure containing the canonicalized data of a filtered ID,
             that is, a basic ID optionally with a filter.
            
             'canonID' is always non-null.  It may be the empty string "".
             It is the id that should be assigned to the created
             transliterator.  It _cannot_ be instantiated directly.
            
             'basicID' is always non-null and non-empty.  It is always of
             the form S-T or S-T/V.  It is designed to be fed to low-level
             instantiation code that only understands these two formats.
            
             'filter' may be null, if there is none, or non-null and
             non-empty.
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.ParseFilterID(System.String,System.Int32[])">
            Parse a filter ID, that is, an ID of the general form
            "[f1] s1-t1/v1", with the filters optional, and the variants optional.
            @param id the id to be parsed
            @param pos INPUT-OUTPUT parameter.  On input, the position of
            the first character to parse.  On output, the position after
            the last character parsed.
            @return a SingleID object or null if the parse fails
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.ParseSingleID(System.String,System.Int32[],ICU4N.Text.TransliterationDirection)">
            Parse a single ID, that is, an ID of the general form
            "[f1] s1-t1/v1 ([f2] s2-t3/v2)", with the parenthesized element
            optional, the filters optional, and the variants optional.
            @param id the id to be parsed
            @param pos INPUT-OUTPUT parameter.  On input, the position of
            the first character to parse.  On output, the position after
            the last character parsed.
            @param dir the direction.  If the direction is REVERSE then the
            SingleID is constructed for the reverse direction.
            @return a SingleID object or null
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.ParseGlobalFilter(System.String,System.Int32[],ICU4N.Text.TransliterationDirection,System.Int32[],System.Text.StringBuilder)">
            Parse a global filter of the form "[f]" or "([f])", depending
            on 'withParens'.
            @param id the pattern the parse
            @param pos INPUT-OUTPUT parameter.  On input, the position of
            the first character to parse.  On output, the position after
            the last character parsed.
            @param dir the direction.
            @param withParens INPUT-OUTPUT parameter.  On entry, if
            withParens[0] is 0, then parens are disallowed.  If it is 1,
            then parens are requires.  If it is -1, then parens are
            optional, and the return result will be set to 0 or 1.
            @param canonID OUTPUT parameter.  The pattern for the filter
            added to the canonID, either at the end, if dir is FORWARD, or
            at the start, if dir is REVERSE.  The pattern will be enclosed
            in parentheses if appropriate, and will be suffixed with an
            ID_DELIM character.  May be null.
            @return a UnicodeSet object or null.  A non-null results
            indicates a successful parse, regardless of whether the filter
            applies to the given direction.  The caller should discard it
            if withParens != (dir == REVERSE).
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.ParseCompoundID(System.String,ICU4N.Text.TransliterationDirection,System.Text.StringBuilder,System.Collections.Generic.IList{ICU4N.Text.TransliteratorIDParser.SingleID},ICU4N.Text.UnicodeSet[])">
            Parse a compound ID, consisting of an optional forward global
            filter, a separator, one or more single IDs delimited by
            separators, an an optional reverse global filter.  The
            separator is a semicolon.  The global filters are UnicodeSet
            patterns.  The reverse global filter must be enclosed in
            parentheses.
            @param id the pattern the parse
            @param dir the direction.
            @param canonID OUTPUT parameter that receives the canonical ID,
            consisting of canonical IDs for all elements, as returned by
            parseSingleID(), separated by semicolons.  Previous contents
            are discarded.
            @param list OUTPUT parameter that receives a list of SingleID
            objects representing the parsed IDs.  Previous contents are
            discarded.
            @param globalFilter OUTPUT parameter that receives a pointer to
            a newly created global filter for this ID in this direction, or
            null if there is none.
            @return true if the parse succeeds, that is, if the entire
            id is consumed without syntax error.
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.InstantiateList(System.Collections.Generic.IList{ICU4N.Text.TransliteratorIDParser.SingleID})">
            Returns the list of Transliterator objects for the
            given list of SingleID objects.
            
            @param ids list vector of SingleID objects.
            @return Actual transliterators for the list of SingleIDs
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.IDtoSTV(System.String)">
            Parse an ID into pieces.  Take IDs of the form T, T/V, S-T,
            S-T/V, or S/V-T.  If the source is missing, return a source of
            ANY.
            @param id the id string, in any of several forms
            @return an array of 4 strings: source, target, variant, and
            isSourcePresent.  If the source is not present, ANY will be
            given as the source, and isSourcePresent will be null.  Otherwise
            isSourcePresent will be non-null.  The target may be empty if the
            id is not well-formed.  The variant may be empty.
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.STVtoID(System.String,System.String,System.String)">
            Given source, target, and variant strings, concatenate them into a
            full ID.  If the source is empty, then "Any" will be used for the
            source, so the ID will always be of the form s-t/v or s-t.
        </member>
        <!-- Badly formed XML comment ignored for member "M:ICU4N.Text.TransliteratorIDParser.RegisterSpecialInverse(System.String,System.String,System.Boolean)" -->
        <member name="M:ICU4N.Text.TransliteratorIDParser.ParseFilterID(System.String,System.Int32[],System.Boolean)">
            Parse an ID into component pieces.  Take IDs of the form T,
            T/V, S-T, S-T/V, or S/V-T.  If the source is missing, return a
            source of ANY.
            @param id the id string, in any of several forms
            @param pos INPUT-OUTPUT parameter.  On input, pos[0] is the
            offset of the first character to parse in id.  On output,
            pos[0] is the offset after the last parsed character.  If the
            parse failed, pos[0] will be unchanged.
            @param allowFilter if true, a UnicodeSet pattern is allowed
            at any location between specs or delimiters, and is returned
            as the fifth string in the array.
            @return a Specs object, or null if the parse failed.  If
            neither source nor target was seen in the parsed id, then the
            parse fails.  If allowFilter is true, then the parsed filter
            pattern is returned in the Specs object, otherwise the returned
            filter reference is null.  If the parse fails for any reason
            null is returned.
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.SpecsToID(ICU4N.Text.TransliteratorIDParser.Specs,ICU4N.Text.TransliterationDirection)">
            Givens a Spec object, convert it to a SingleID object.  The
            Spec object is a more unprocessed parse result.  The SingleID
            object contains information about canonical and basic IDs.
            @return a SingleID; never returns null.  Returned object always
            has 'filter' field of null.
        </member>
        <member name="M:ICU4N.Text.TransliteratorIDParser.SpecsToSpecialInverse(ICU4N.Text.TransliteratorIDParser.Specs)">
            Given a Specs object, return a SingleID representing the
            special inverse of that ID.  If there is no special inverse
            then return null.
            @return a SingleID or null.  Returned object always has
            'filter' field of null.
        </member>
        <member name="P:ICU4N.Text.TransliteratorParser.DataVector">
            PUBLIC data member.
            A Vector of RuleBasedTransliterator.Data objects, one for each discrete group
            of rules in the rule set
        </member>
        <member name="P:ICU4N.Text.TransliteratorParser.IdBlockVector">
            PUBLIC data member.
            A Vector of Strings containing all of the ID blocks in the rule set
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.curData">
            The current data object for which we are parsing rules
        </member>
        <member name="P:ICU4N.Text.TransliteratorParser.CompoundFilter">
            PUBLIC data member containing the parsed compound filter, if any.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.parseData">
            Temporary symbol table used during parsing.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.variablesVector">
            Temporary vector of set variables.  When parsing is complete, this
            is copied into the array data.variables.  As with data.variables,
            element 0 corresponds to character data.variablesBase.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.variableNames">
            Temporary table of variable names.  When parsing is complete, this is
            copied into data.variableNames.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.segmentStandins">
            String of standins for segments.  Used during the parsing of a single
            rule.  segmentStandins.charAt(0) is the standin for "$1" and corresponds
            to StringMatcher object segmentObjects.elementAt(0), etc.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.segmentObjects">
            Vector of StringMatcher objects for segments.  Used during the
            parsing of a single rule.
            segmentStandins.charAt(0) is the standin for "$1" and corresponds
            to StringMatcher object segmentObjects.elementAt(0), etc.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.variableNext">
            The next available stand-in for variables.  This starts at some point in
            the private use area (discovered dynamically) and increments up toward
            <code>variableLimit</code>.  At any point during parsing, available
            variables are <code>variableNext..variableLimit-1</code>.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.variableLimit">
            The last available stand-in for variables.  This is discovered
            dynamically.  At any point during parsing, available variables are
            <code>variableNext..variableLimit-1</code>.  During variable definition
            we use the special value variableLimit-1 as a placeholder.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.undefinedVariableName">
            When we encounter an undefined variable, we do not immediately signal
            an error, in case we are defining this variable, e.g., "$a = [a-z];".
            Instead, we save the name of the undefined variable, and substitute
            in the placeholder char variableLimit - 1, and decrement
            variableLimit.
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.dotStandIn">
            The stand-in character for the 'dot' set, represented by '.' in
            patterns.  This is allocated the first time it is needed, and
            reused thereafter.
        </member>
        <member name="T:ICU4N.Text.TransliteratorParser.ParseData">
            This class implements the SymbolTable interface.  It is used
            during parsing to give UnicodeSet access to variables that
            have been defined so far.  Note that it uses variablesVector,
            _not_ data.variables.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseData.Lookup(System.String)">
            Implement SymbolTable API.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseData.LookupMatcher(System.Int32)">
            Implement SymbolTable API.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseData.ParseReference(System.String,ICU4N.Support.Text.ParsePosition,System.Int32)">
            Implement SymbolTable API.  Parse out a symbol reference
            name.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseData.IsMatcher(System.Int32)">
            Return true if the given character is a matcher standin or a plain
            character (non standin).
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseData.IsReplacer(System.Int32)">
            Return true if the given character is a replacer standin or a plain
            character (non standin).
        </member>
        <member name="T:ICU4N.Text.TransliteratorParser.RuleBody">
            A private abstract class representing the interface to rule
            source code that is broken up into lines.  Handles the
            folding of lines terminated by a backslash.  This folding
            is limited; it does not account for comments, quotes, or
            escapes, so its use to be limited.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleBody.NextLine">
            Retrieve the next line of the source, or return null if
            none.  Folds lines terminated by a backslash into the
            next line, without regard for comments, quotes, or
            escapes.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleBody.Reset">
            Reset to the first line of the source.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleBody.HandleNextLine">
            Subclass method to return the next line of the source.
        </member>
        <member name="T:ICU4N.Text.TransliteratorParser.RuleArray">
            RuleBody subclass for a String[] array.
        </member>
        <member name="T:ICU4N.Text.TransliteratorParser.RuleHalf">
            A class representing one side of a rule.  This class knows how to
            parse half of a rule.  It is tightly coupled to the method
            TransliteratorParser.parseRule().
        </member>
        <member name="F:ICU4N.Text.TransliteratorParser.RuleHalf.nextSegmentNumber">
            The segment number from 1..n of the next '(' we see
            during parsing; 1-based.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleHalf.Parse(System.String,System.Int32,System.Int32,ICU4N.Text.TransliteratorParser)">
            Parse one side of a rule, stopping at either the limit,
            the END_OF_RULE character, or an operator.
            @return the index after the terminating character, or
            if limit was reached, limit
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleHalf.ParseSection(System.String,System.Int32,System.Int32,ICU4N.Text.TransliteratorParser,System.Text.StringBuilder,ICU4N.Text.UnicodeSet,System.Boolean)">
            Parse a section of one side of a rule, stopping at either
            the limit, the END_OF_RULE character, an operator, or a
            segment close character.  This method parses both a
            top-level rule half and a segment within such a rule half.
            It calls itself recursively to parse segments and nested
            segments.
            @param buf buffer into which to accumulate the rule pattern
            characters, either literal characters from the rule or
            standins for UnicodeMatcher objects including segments.
            @param illegal the set of special characters that is illegal during
            this parse.
            @param isSegment if true, then we've already seen a '(' and
            pos on entry points right after it.  Accumulate everything
            up to the closing ')', put it in a segment matcher object,
            generate a standin for it, and add the standin to buf.  As
            a side effect, update the segments vector with a reference
            to the segment matcher.  This works recursively for nested
            segments.  If isSegment is false, just accumulate
            characters into buf.
            @return the index after the terminating character, or
            if limit was reached, limit
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleHalf.RemoveContext">
            Remove context.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleHalf.IsValidOutput(ICU4N.Text.TransliteratorParser)">
            Return true if this half looks like valid output, that is, does not
            contain quantifiers or other special input-only elements.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.RuleHalf.IsValidInput(ICU4N.Text.TransliteratorParser)">
            Return true if this half looks like valid input, that is, does not
            contain functions or other special output-only elements.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.#ctor">
            Constructor.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.Parse(System.String,ICU4N.Text.TransliterationDirection)">
            Parse a set of rules.  After the parse completes, examine the public
            data members for results.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseRules(ICU4N.Text.TransliteratorParser.RuleBody,ICU4N.Text.TransliterationDirection)">
             Parse an array of zero or more rules.  The strings in the array are
             treated as if they were concatenated together, with rule terminators
             inserted between array elements if not present already.
            
             Any previous rules are discarded.  Typically this method is called exactly
             once, during construction.
            
             The member this.data will be set to null if there are no rules.
            
             @exception IllegalIcuArgumentException if there is a syntax error in the
             rules
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseRule(System.String,System.Int32,System.Int32)">
             MAIN PARSER.  Parse the next rule in the given rule string, starting
             at pos.  Return the index after the last character parsed.  Do not
             parse characters at or after limit.
            
             Important:  The character at pos must be a non-whitespace character
             that is not the comment character.
            
             This method handles quoting, escaping, and whitespace removal.  It
             parses the end-of-rule character.  It recognizes context and cursor
             indicators.  Once it does a lexical breakdown of the rule at pos, it
             creates a rule object and adds it to our rule list.
            
             This method is tightly coupled to the inner class RuleHalf.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.SetVariableRange(System.Int32,System.Int32)">
            Set the variable range to [start, end] (inclusive).
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.CheckVariableRange(System.Int32,System.String,System.Int32)">
            Assert that the given character is NOT within the variable range.
            If it is, signal an error.  This is neccesary to ensure that the
            variable range does not overlap characters used in a rule.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.PragmaMaximumBackup(System.Int32)">
            CLOVER:OFF
            Set the maximum backup to 'backup', in response to a pragma
            statement.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.PragmaNormalizeRules(ICU4N.Text.NormalizerMode)">
            CLOVER:OFF
            Begin normalizing all rules using the given mode, in response
            to a pragma statement.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ResemblesPragma(System.String,System.Int32,System.Int32)">
            CLOVER:ON
            Return true if the given rule looks like a pragma.
            @param pos offset to the first non-whitespace character
            of the rule.
            @param limit pointer past the last character of the rule.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParsePragma(System.String,System.Int32,System.Int32)">
            Parse a pragma.  This method assumes resemblesPragma() has
            already returned true.
            @param pos offset to the first non-whitespace character
            of the rule.
            @param limit pointer past the last character of the rule.
            @return the position index after the final ';' of the pragma,
            or -1 on failure.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.SyntaxError(System.String,System.String,System.Int32)">
            Throw an exception indicating a syntax error.  Search the rule string
            for the probable end of the rule.  Of course, if the error is that
            the end of rule marker is missing, then the rule end will not be found.
            In any case the rule start will be correctly reported.
            @param msg error description
            @param rule pattern string
            @param start position of first character of current rule
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.ParseSet(System.String,ICU4N.Support.Text.ParsePosition)">
            Parse a UnicodeSet out, store it, and return the stand-in character
            used to represent it.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.GenerateStandInFor(System.Object)">
            Generate and return a stand-in for a new UnicodeMatcher or UnicodeReplacer.
            Store the object.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.GetSegmentStandin(System.Int32)">
            Return the standin for segment seg (1-based).
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.SetSegmentObject(System.Int32,ICU4N.Text.StringMatcher)">
            Set the object for segment seg (1-based).
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.GetDotStandIn">
            Return the stand-in for the dot set.  It is allocated the first
            time and reused thereafter.
        </member>
        <member name="M:ICU4N.Text.TransliteratorParser.AppendVariableDef(System.String,System.Text.StringBuilder)">
            Append the value of the given variable name to the given
            StringBuffer.
            @exception IllegalIcuArgumentException if the name is unknown.
        </member>
        <member name="F:ICU4N.Text.TransliteratorRegistry.registry">
             Dynamic registry mapping full IDs to Entry objects.  This
             contains both public and internal entities.  The visibility is
             controlled by whether an entry is listed in availableIDs and
             specDAG or not.
            
             Keys are CaseInsensitiveString objects.
             Values are objects of class Class (subclass of Transliterator),
             RuleBasedTransliterator.Data, Transliterator.Factory, or one
             of the entry classes defined here (AliasEntry or ResourceEntry).
        </member>
        <member name="F:ICU4N.Text.TransliteratorRegistry.specDAG">
             DAG of visible IDs by spec.  Hashtable: source => (Hashtable:
             target => (Vector: variant)) The Vector of variants is never
             empty.  For a source-target with no variant, the special
             variant NO_VARIANT (the empty string) is stored in slot zero of
             the UVector.
            
             Keys are CaseInsensitiveString objects.
             Values are Hashtable of (CaseInsensitiveString -> Vector of
             CaseInsensitiveString)
        </member>
        <member name="F:ICU4N.Text.TransliteratorRegistry.availableIDs">
            Vector of public full IDs (CaseInsensitiveString objects).
        </member>
        <member name="T:ICU4N.Text.TransliteratorRegistry.Spec">
             A Spec is a string specifying either a source or a target.  In more
             general terms, it may also specify a variant, but we only use the
             Spec class for sources and targets.
            
             A Spec may be a locale or a script.  If it is a locale, it has a
             fallback chain that goes xx_YY_ZZZ -> xx_YY -> xx -> ssss, where
             ssss is the script mapping of xx_YY_ZZZ.  The Spec API methods
             hasFallback(), next(), and reset() iterate over this fallback
             sequence.
            
             The Spec class canonicalizes itself, so the locale is put into
             canonical form, or the script is transformed from an abbreviation
             to a full name.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Spec.GetBundle">
            Return the ResourceBundle for this spec, at the current
            level of iteration.  The level of iteration goes from
            aa_BB_CCC to aa_BB to aa.  If the bundle does not
            correspond to the current level of iteration, return null.
            If isLocale() is false, always return null.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Get(System.String,System.Text.StringBuilder)">
             Given a simple ID (forward direction, no inline filter, not
             compound) attempt to instantiate it from the registry.  Return
             0 on failure.
            
             Return a non-empty aliasReturn value if the ID points to an alias.
             We cannot instantiate it ourselves because the alias may contain
             filters or compounds, which we do not understand.  Caller should
             make aliasReturn empty before calling.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Put(System.String,System.Type,System.Boolean)">
            Register a class.  This adds an entry to the
            dynamic store, or replaces an existing entry.  Any entry in the
            underlying static locale resource store is masked.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Put(System.String,ICU4N.Text.ITransliteratorFactory,System.Boolean)">
            Register an ID and a factory function pointer.  This adds an
            entry to the dynamic store, or replaces an existing entry.  Any
            entry in the underlying static locale resource store is masked.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Put(System.String,System.String,ICU4N.Text.TransliterationDirection,System.Boolean)">
            Register an ID and a resource name.  This adds an entry to the
            dynamic store, or replaces an existing entry.  Any entry in the
            underlying static locale resource store is masked.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Put(System.String,System.String,System.Boolean)">
            Register an ID and an alias ID.  This adds an entry to the
            dynamic store, or replaces an existing entry.  Any entry in the
            underlying static locale resource store is masked.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Put(System.String,ICU4N.Text.Transliterator,System.Boolean)">
            Register an ID and a Transliterator object.  This adds an entry
            to the dynamic store, or replaces an existing entry.  Any entry
            in the underlying static locale resource store is masked.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Remove(System.String)">
            Unregister an ID.  This removes an entry from the dynamic store
            if there is one.  The static locale resource store is
            unaffected.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.GetAvailableIDs">
             Returns an enumeration over the programmatic names of visible
             registered transliterators.
            
             @return An <code>Enumeration</code> over <code>String</code> objects
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.GetAvailableSources">
             Returns an enumeration over all visible source names.
            
             @return An <code>Enumeration</code> over <code>String</code> objects
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.GetAvailableTargets(System.String)">
             Returns an enumeration over visible target names for the given
             source.
            
             @return An <code>Enumeration</code> over <code>String</code> objects
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.GetAvailableVariants(System.String,System.String)">
             Returns an enumeration over visible variant names for the given
             source and target.
            
             @return An <code>Enumeration</code> over <code>String</code> objects
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.RegisterEntry(System.String,System.String,System.String,System.Object,System.Boolean)">
            Convenience method.  Calls 6-arg registerEntry().
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.RegisterEntry(System.String,System.Object,System.Boolean)">
            Convenience method.  Calls 6-arg registerEntry().
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.RegisterEntry(System.String,System.String,System.String,System.String,System.Object,System.Boolean)">
            Register an entry object (adopted) with the given ID, source,
            target, and variant strings.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.RegisterSTV(System.String,System.String,System.String)">
            Register a source-target/variant in the specDAG.  Variant may be
            empty, but source and target must not be.  If variant is empty then
            the special variant NO_VARIANT is stored in slot zero of the
            UVector of variants.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.RemoveSTV(System.String,System.String,System.String)">
            Remove a source-target/variant from the specDAG.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.FindInDynamicStore(ICU4N.Text.TransliteratorRegistry.Spec,ICU4N.Text.TransliteratorRegistry.Spec,System.String)">
            Attempt to find a source-target/variant in the dynamic registry
            store.  Return 0 on failure.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.FindInStaticStore(ICU4N.Text.TransliteratorRegistry.Spec,ICU4N.Text.TransliteratorRegistry.Spec,System.String)">
             Attempt to find a source-target/variant in the static locale
             resource store.  Do not perform fallback.  Return 0 on failure.
            
             On success, create a new entry object, register it in the dynamic
             store, and return a pointer to it, but do not make it public --
             just because someone requested something, we do not expand the
             available ID list (or spec DAG).
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.FindInBundle(ICU4N.Text.TransliteratorRegistry.Spec,ICU4N.Text.TransliteratorRegistry.Spec,System.String,ICU4N.Text.TransliterationDirection)">
             Attempt to find an entry in a single resource bundle.  This is
             a one-sided lookup.  findInStaticStore() performs up to two such
             lookups, one for the source, and one for the target.
            
             Do not perform fallback.  Return 0 on failure.
            
             On success, create a new Entry object, populate it, and return it.
             The caller owns the returned object.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Find(System.String)">
            Convenience method.  Calls 3-arg find().
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.Find(System.String,System.String,System.String)">
             Top-level find method.  Attempt to find a source-target/variant in
             either the dynamic or the static (locale resource) store.  Perform
             fallback.
            
             Lookup sequence for ss_SS_SSS-tt_TT_TTT/v:
            
               ss_SS_SSS-tt_TT_TTT/v -- in hashtable
               ss_SS_SSS-tt_TT_TTT/v -- in ss_SS_SSS (no fallback)
            
                 repeat with t = tt_TT_TTT, tt_TT, tt, and tscript
            
                 ss_SS_SSS-t/*
                 ss_SS-t/*
                 ss-t/*
                 sscript-t/*
            
             Here * matches the first variant listed.
            
             Caller does NOT own returned object.  Return 0 on failure.
        </member>
        <member name="M:ICU4N.Text.TransliteratorRegistry.InstantiateEntry(System.String,System.Object[],System.Text.StringBuilder)">
             Given an Entry object, instantiate it.  Caller owns result.  Return
             0 on failure.
            
             Return a non-empty aliasReturn value if the ID points to an alias.
             We cannot instantiate it ourselves because the alias may contain
             filters or compounds, which we do not understand.  Caller should
             make aliasReturn empty before calling.
            
             The entry object is assumed to reside in the dynamic store.  It may be
             modified.
        </member>
        <member name="T:ICU4N.Text.UnescapeTransliterator">
            <summary>
            A transliterator that converts Unicode escape forms to the
            characters they represent.  Escape forms have a prefix, a suffix, a
            radix, and minimum and maximum digit counts.
            <para/>
            This class is internal. It registers several standard
            variants with the system which are then accessed via their IDs.
            </summary>
            <author>Alan Liu</author>
        </member>
        <member name="F:ICU4N.Text.UnescapeTransliterator.spec">
            <summary>
            The encoded pattern specification.  The pattern consists of
            zero or more forms.  Each form consists of a prefix, suffix,
            radix, minimum digit count, and maximum digit count.  These
            values are stored as a five character header.  That is, their
            numeric values are cast to 16-bit characters and stored in the
            string.  Following these five characters, the prefix
            characters, then suffix characters are stored.  Each form thus
            takes n+5 characters, where n is the total length of the prefix
            and suffix.  The end is marked by a header of length one
            consisting of the character <see cref="F:ICU4N.Text.UnescapeTransliterator.END"/>.
            </summary>
        </member>
        <member name="F:ICU4N.Text.UnescapeTransliterator.END">
            <summary>
            Special character marking the end of the spec[] array.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UnescapeTransliterator.Register">
            <summary>
            Registers standard variants with the system.  Called by
            <see cref="T:ICU4N.Text.Transliterator"/> during initialization.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UnescapeTransliterator.#ctor(System.String,System.Char[])">
            <summary>
            Internal constructor.  Takes the encoded spec array.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UnescapeTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UnescapeTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.UnicodeNameTransliterator">
            <summary>
            A transliterator that performs character to name mapping.
            It generates the Perl syntax \N{name}.
            </summary>
            <author>Alan Liu</author>
        </member>
        <member name="M:ICU4N.Text.UnicodeNameTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UnicodeNameTransliterator.#ctor(ICU4N.Text.UnicodeFilter)">
            <summary>
            Constructs a transliterator.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ICU4N.Text.UnicodeNameTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UnicodeNameTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
        <member name="T:ICU4N.Text.UppercaseTransliterator">
            <summary>
            A transliterator that performs locale-sensitive ToUpper()
            case mapping.
            </summary>
        </member>
        <member name="F:ICU4N.Text.UppercaseTransliterator._ID">
            <summary>
            Package accessible ID.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UppercaseTransliterator.Register">
            <summary>
            System registration hook.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UppercaseTransliterator.#ctor(ICU4N.Util.ULocale)">
            <summary>
            Constructs a transliterator.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UppercaseTransliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)">
            <summary>
            Implements <see cref="M:ICU4N.Text.Transliterator.HandleTransliterate(ICU4N.Text.IReplaceable,ICU4N.Text.TransliterationPosition,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ICU4N.Text.UppercaseTransliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)">
            <seealso cref="M:ICU4N.Text.Transliterator.AddSourceTargetSet(ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet,ICU4N.Text.UnicodeSet)"/>
        </member>
    </members>
</doc>
